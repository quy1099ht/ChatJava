/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.testing;

import File.FileServer;
import File.SendFile;
import Menu.Friend;
import VoicePlayer.ServerStart;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

import voicecall.VoiceCall;

/**
 *
 * @author ACER
 */
public class Chat extends javax.swing.JFrame
{

    private static ArrayList<Friend> friends = new ArrayList<>();
    /**
     * Creates new form Chat
     */
    String name;
    String IP;

    public Chat()
    {
        initComponents();
        SetUp();
        Connection("192.168.7.104");
        SetUp();
    }

    public Chat(String IP, String NAME)
    {
        initComponents();
        name = NAME;
        this.IP = IP;
        Connection(IP);
        initFriends(IP, "Friend", NAME);
        SetUp();
    }

    public static void initFriends(String IP, String content, String myName)
    {
        try
        {
            if(friends.size() > 0)
            {
                friends.clear();
            }
            Socket socket = new Socket(IP, 1000);

            DataOutputStream outToServer = new DataOutputStream(socket.getOutputStream());

            BufferedReader inFromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            outToServer.writeBytes("Name_" + myName + "\n");
            System.out.println(inFromServer.readLine());

            outToServer.writeBytes("Length" + "\n");
            //Đọc tin từ Server thông qua InputSteam đã nối với socket
            int n = Integer.parseInt(inFromServer.readLine());

            //System.out.println(a);
            System.out.println(n);

            for (int i = 0; i < n; i++)
            {
                outToServer.writeBytes(content + "\n");
                String b = inFromServer.readLine();
                String friend[] = b.split("_");
                String a = (String) friend[1].subSequence(1, friend[1].length());
                if (!friend[0].equals(myName))
                {
                    
                }friends.add(new Friend(friend[0], a));

            }

            socket.close();

        } catch (IOException ex)
        {
            //Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void SetUp()
    {
        sendingMode.removeAllItems();
        sendingMode.addItem("Chat with bot");
        recver = "Bot";
        sendingMode.addItem("Chat with someone");
        sendingMode.addItem("Chat with everyone");

        
        sendingMode.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                if (sendingMode.getSelectedItem().equals("Chat with bot"))
                {
                    Hide();
                    recver = "Bot";
                }
                else if (sendingMode.getSelectedItem().equals("Chat with someone"))
                {
                    friend.setVisible(true);
                    toLabel.setVisible(true);
                    recver = "someone";
                }
                else if (sendingMode.getSelectedItem().equals("Chat with everyone"))
                {
                    Hide();
                    recver = "all";
                }
            }
        });
        callLabel.setVisible(false);
        callTo.setVisible(false);
        startCall.setVisible(false);

        FileServer fileSer = new FileServer();
        fileSer.start();

        ServerStart serv = new ServerStart();
        serv.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        enter = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        sendingMode = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        toLabel = new javax.swing.JLabel();
        toText = new javax.swing.JTextField();
        BtFormat = new javax.swing.JButton();
        startCall = new javax.swing.JButton();
        callLabel = new javax.swing.JLabel();
        call = new javax.swing.JButton();
        sendFile = new javax.swing.JButton();
        friend = new javax.swing.JComboBox<>();
        callTo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        sendTo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chatting");
        addWindowFocusListener(new java.awt.event.WindowFocusListener()
        {
            public void windowGainedFocus(java.awt.event.WindowEvent evt)
            {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt)
            {
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jTextField1KeyPressed(evt);
            }
        });

        enter.setText("Enter");
        enter.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                enterActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                resetBtnActionPerformed(evt);
            }
        });

        sendingMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Reciever :");

        toLabel.setText("To : ");

        BtFormat.setText("Format");
        BtFormat.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BtFormatActionPerformed(evt);
            }
        });

        startCall.setText("Start Calling");
        startCall.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startCallActionPerformed(evt);
            }
        });

        callLabel.setText("Call To :");

        call.setText("Call");
        call.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                callActionPerformed(evt);
            }
        });

        sendFile.setText("Send File");
        sendFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendFileActionPerformed(evt);
            }
        });

        friend.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        callTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Send To :");

        sendTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendingMode, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(friend, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(toText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resetBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(callLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(callTo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(startCall, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(enter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtFormat)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(8, 8, 8)
                                .addComponent(sendTo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sendFile)
                                .addGap(18, 18, 18)
                                .addComponent(call, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(131, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendingMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(toLabel)
                    .addComponent(toText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(friend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startCall)
                    .addComponent(callLabel)
                    .addComponent(callTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BtFormat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enter))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetBtn)
                    .addComponent(call)
                    .addComponent(sendFile)
                    .addComponent(jLabel2)
                    .addComponent(sendTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed

        try
        {
            // TODO add your handling code here:
            String sentence_to_server = jTextField1.getText();
            String sentence_from_server;

            //Tạo Inputstream(từ bàn phím)
            //Socket cho client kết nối đến server qua ID address và port number
            //Tạo OutputStream nối với Socket
            DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
            //Tạo inputStream nối với Socket

            if (NameState == true)
            {
                if (recver == "someone")
                {
                    outToServer.writeBytes("Chat_" + friend.getSelectedItem().toString() + "_" + sentence_to_server + '\n');
                    jTextArea1.append("Me >>" + sentence_to_server + "\n");
                    jTextField1.setText("");
                }
                else
                {
                    outToServer.writeBytes("Chat_" + recver + "_" + sentence_to_server + '\n');
                    jTextArea1.append("Me >>" + sentence_to_server + "\n");
                    jTextField1.setText("");
                }

            }
            else
            {

            }

            System.out.println();

            //Send Info
        } catch (IOException ex)
        {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_enterActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        /*if(temp.equals(chat.read)){
            System.out.append("Same message");
        }else
        {
            jTextArea1.append(chat.read + "\n");
            temp = chat.read;
            System.out.println("LOL");
        
        }*/

    }//GEN-LAST:event_formWindowGainedFocus

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        resetBtn.setVisible(false);
        NameState = true;
        if (temp.equals(chat.read))
        {
        }
        else
        {
            jTextArea1.append("" + chat.read + "\n");
            temp = chat.read;
        }
        initFriends(IP, "Friend", name);
        friend.removeAllItems();
        callTo.removeAllItems();
        sendTo.removeAllItems();
        

        for (int i = 0; i < friends.size(); i++)
        {
            friend.addItem(friends.get(i).name);
            callTo.addItem(friends.get(i).name);
            sendTo.addItem(friends.get(i).name);
        }


    }//GEN-LAST:event_resetBtnActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void BtFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtFormatActionPerformed
        // TODO add your handling code here:        
        AdvanceFont s = new AdvanceFont();
        s.setVisible(true);
        s.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_BtFormatActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            enter.doClick();
        }
    }//GEN-LAST:event_jTextField1KeyPressed

    private void callActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_callActionPerformed
    {//GEN-HEADEREND:event_callActionPerformed
        // TODO add your handling code here:
        callLabel.setVisible(true);
        callTo.setVisible(true);
        startCall.setVisible(true);
    }//GEN-LAST:event_callActionPerformed

    private void startCallActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startCallActionPerformed
    {//GEN-HEADEREND:event_startCallActionPerformed
        try
        {
            String sToSer;
            DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
            
            //Recorder
            VoiceCall call = new VoiceCall(name, GetIP(callTo.getSelectedItem().toString()));
            call.start();
            //Listener
            ServerStart serv = new ServerStart();
            serv.start();
            
        } catch (IOException ex)
        {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startCallActionPerformed

    private void sendFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendFileActionPerformed
    {//GEN-HEADEREND:event_sendFileActionPerformed
        // TODO add your handling code here:
        SendFile sendfi = new SendFile(GetIP(sendTo.getSelectedItem().toString()));
        sendfi.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        sendfi.setVisible(true);
    }//GEN-LAST:event_sendFileActionPerformed

    /**
     * @param args the command line arguments
     */
    static Socket clientSocket;
    static ReadChat chat;
    static String temp = "";
    String recver = "";
    boolean NameState = false;

    public static void Connection(String ip)
    {
        ActionListener taskPerformer = new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                //...Perform a task...
                resetBtn.doClick();
            }
        };
        Timer timer = new Timer(4000, taskPerformer);
        timer.setRepeats(true);

        timer.start();

        System.out.println("Reading SMTP Info.");
        try
        {
            clientSocket = new Socket(ip, 600);
            System.out.println("Server Connected!");
        } catch (IOException ex)
        {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
        try
        {
            chat = new ReadChat(clientSocket);
            chat.start();
            System.out.println("Reading...");
        } catch (IOException ex)
        {
            Logger.getLogger(Chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void Hide()
    {
        toLabel.setVisible(false);
        toText.setVisible(false);
        friend.setVisible(false);
    }

    private static String GetIP(String name)
    {
        String ip = "";
        for (Friend f : friends)
        {
            if (f.name.equals(name))
            {
                System.out.println("IP = " + f.ip);
                return f.ip;
            }
        }
        return ip;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtFormat;
    private javax.swing.JButton call;
    private javax.swing.JLabel callLabel;
    private javax.swing.JComboBox<String> callTo;
    private javax.swing.JButton enter;
    private javax.swing.JComboBox<String> friend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JButton resetBtn;
    private javax.swing.JButton sendFile;
    private javax.swing.JComboBox<String> sendTo;
    private javax.swing.JComboBox<String> sendingMode;
    private javax.swing.JButton startCall;
    private javax.swing.JLabel toLabel;
    private javax.swing.JTextField toText;
    // End of variables declaration//GEN-END:variables
}
