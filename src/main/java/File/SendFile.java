/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package File;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.net.Socket;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ACER
 */
public class SendFile extends javax.swing.JFrame
{

    /**
     * Creates new form SendFile
     */
    String filePath = "";
    String IP = "";
    public SendFile()
    {
        initComponents();
        send.setEnabled(false);
    }
    public SendFile(String IP)
    {
        initComponents();
        this.IP = IP;
        send.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        send = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        getFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("SEND FILE TO FRIEND");

        getFile.setText("Get File");
        getFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                getFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(getFile, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(getFile)
                .addGap(18, 18, 18)
                .addComponent(send)
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_getFileActionPerformed
    {//GEN-HEADEREND:event_getFileActionPerformed
        // TODO add your handling code here:

        final JFileChooser fileDialog = new JFileChooser();
        int returnVal = fileDialog.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            java.io.File file = fileDialog.getSelectedFile();
            System.out.print(file.getAbsolutePath());
            filePath = file.getAbsolutePath();
            send.setEnabled(true);
        }
    }//GEN-LAST:event_getFileActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_sendActionPerformed
    {//GEN-HEADEREND:event_sendActionPerformed
        // TODO add your handling code here:
        SendFile(filePath);
    }//GEN-LAST:event_sendActionPerformed
    
    private void SendFile(String path)
    {
        File fileToSend = new File(path);
        try {
            FileInputStream fileInputStream = new FileInputStream(fileToSend.getAbsolutePath());
            
            System.out.println("IP = " + IP);
            // Create a socket connection to connect with the server.
            Socket socket = new Socket(IP, 6000);
            
            // Create an output stream to write to write to the server over the socket connection.
            DataOutputStream dataOutputStream = new DataOutputStream(socket.getOutputStream());
            
            // Get the name of the file you want to send and store it in filename.
            String fileName = fileToSend.getName();
            
            // Convert the name of the file into an array of bytes to be sent to the server.
            byte[] fileNameBytes = fileName.getBytes();
            
            // Create a byte array the size of the file so don't send too little or too much data to the server.
            byte[] fileBytes = new byte[(int) fileToSend.length()];
            
            // Put the contents of the file into the array of bytes to be sent so these bytes can be sent to the server.
            fileInputStream.read(fileBytes);
            
            // Send the length of the name of the file so server knows when to stop reading.
            dataOutputStream.writeInt(fileNameBytes.length);
            
            // Send the file name.
            dataOutputStream.write(fileNameBytes);
            
            // Send the length of the byte array so the server knows when to stop reading.
            dataOutputStream.writeInt(fileBytes.length);
            System.out.println("Length = " + fileBytes.length);
            
            // Send the actual file.
            dataOutputStream.write(fileBytes);
            socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getFile;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton send;
    // End of variables declaration//GEN-END:variables
}
